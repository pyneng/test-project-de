.. raw:: latex

   \newpage

Задания
=======

.. include:: ./exercises_intro.rst


Задание 1.1
~~~~~~~~~~~~

Создать класс IPv4Network, который представляет сеть.
При создании экземпляра класса, как аргумент передается строка с адресом сети.

Пример создания экземпляра класса:

.. code:: python

    In [3]: net1 = IPv4Network('10.1.1.0/29')

После этого, должны быть доступны переменные address и mask:

.. code:: python

    In [5]: net1.address
    Out[5]: '10.1.1.0'

    In [6]: net1.mask
    Out[6]: 29


Broadcast адрес должен быть записан в атрибуте broadcast:

.. code:: python

    In [7]: net1.broadcast
    Out[7]: '10.1.1.7'

Также должен быть создан атрибут allocated в котором будет
храниться кортеж с адресами, которые назначены на каком-то
устройстве/хосте. Изначально атрибут равен пустому кортежу:

.. code:: python

    In [8]: print(net1.allocated)
    ()


Метод hosts должен возвращать кортеж IP-адресов, которые входят в сеть,
не включая адрес сети и broadcast:

.. code:: python

    In [9]: net1.hosts()
    Out[9]: ('10.1.1.1', '10.1.1.2', '10.1.1.3', '10.1.1.4', '10.1.1.5', '10.1.1.6')

Метод allocate ожидает как аргумент IP-адрес. Указанный адрес
должен быть записан в кортеж в атрибуте net1.allocated:

.. code:: python

    In [10]: net1 = IPv4Network('10.1.1.0/29')

    In [11]: print(net1.allocated)
    ()

    In [12]: net1.allocate('10.1.1.6')

    In [13]: net1.allocate('10.1.1.3')

    In [14]: print(net1.allocated)
    ('10.1.1.6', '10.1.1.3')


Метод unassigned возвращает возвращает кортеж со свободными адресами:

.. code:: python

    In [15]: net1 = IPv4Network('10.1.1.0/29')

    In [16]: net1.allocate('10.1.1.4')
        ...: net1.allocate('10.1.1.6')
        ...: net1.allocate('10.1.1.8')
        ...:

    In [17]: net1.unassigned()
    Out[17]: ('10.1.1.1', '10.1.1.2', '10.1.1.3', '10.1.1.5')


Задание 1.2
~~~~~~~~~~~~

Создать класс PingNetwork. При создании экземпляра класса PingNetwork, как аргумент передается экземпляр класса IPv4Network.

У класса PingNetwork должны быть методы _ping и scan.
Метод _ping с параметром ip: должен пинговать один IP-адрес и возвращать

* True - если адрес пингуется
* False - если адрес не пингуется

Метод scan с таким параметрами:

* workers - значение по умолчанию 5
* include_unassigned - значение по умолчанию False

Метод scan:

* Пингует адреса из сети, которая передается как аргумент при создании экземпляра.
* Адреса должны пинговаться в разных потоках, для этого использовать concurrent.futures.
* По умолчанию, пингуются только адреса, которые находятся в атрибуте allocated.
  Если параметр include_unassigned равен True, должны пинговаться и адреса unassigned.
* Метод должен возвращать кортеж с двумя списками: список доступных IP-адресов и список недоступных IP-адресов



Пример работы с классом PingNetwork. Сначала создаем сеть:

.. code:: python

    In [3]: net1 = IPv4Network('8.8.4.0/29')

И выделяем несколько адресов:

.. code:: python

    In [4]: net1.allocate('8.8.4.2')
       ...: net1.allocate('8.8.4.4')
       ...: net1.allocate('8.8.4.6')
       ...:

    In [5]: net1.allocated
    Out[5]: ('8.8.4.2', '8.8.4.4', '8.8.4.6')

    In [6]: net1.unassigned()
    Out[6]: ('8.8.4.1', '8.8.4.3', '8.8.4.5')

Затем создается экземпляр класса PingNetwork, а сеть передается как аргумент:

.. code:: python

    In [8]: ping_net = PingNetwork(net1)

Пример работы метода scan:

.. code:: python

    In [9]: ping_net.scan()
    Out[9]: (['8.8.4.4'], ['8.8.4.2', '8.8.4.6'])

    In [10]: ping_net.scan(include_unassigned=True)
    Out[10]: (['8.8.4.4'], ['8.8.4.2', '8.8.4.6', '8.8.4.1', '8.8.4.3', '8.8.4.5'])

