.. raw:: latex

   \newpage

Задания
=======

.. include:: ./exercises_intro.rst


Задание 2.1
~~~~~~~~~~~~

Скопировать класс IPv4Network из задания 1.1 и добавить ему все методы,
которые необходимы для реализации протокола последовательности (sequence):

* __getitem__, __len__, __contains__, __iter__
* index, count - должны работать аналогично методам в списках и кортежах

Плюс оба метода, которые отвечают за строковое представление экземпляров
класса IPv4Network.

Пример создания экземпляра класса:

.. code:: python

    In [2]: net1 = IPv4Network('8.8.4.0/29')

Проверка методов:

.. code:: python

    In [3]: for ip in net1:
       ...:     print(ip)
       ...:
    8.8.4.1
    8.8.4.2
    8.8.4.3
    8.8.4.4
    8.8.4.5
    8.8.4.6

    In [4]: net1[2]
    Out[4]: '8.8.4.3'

    In [5]: net1[-1]
    Out[5]: '8.8.4.6'

    In [6]: net1[1:4]
    Out[6]: ('8.8.4.2', '8.8.4.3', '8.8.4.4')

    In [7]: '8.8.4.4' in net1
    Out[7]: True

    In [8]: net1.index('8.8.4.4')
    Out[8]: 3

    In [9]: net1.count('8.8.4.4')
    Out[9]: 1

    In [10]: len(net1)
    Out[10]: 6

Строковое представление:

.. code:: python

    In [13]: net1
    Out[13]: IPv4Network(8.8.4.0/29)

    In [14]: str(net1)
    Out[14]: 'IPv4Network 8.8.4.0/29'


Задание 2.2
~~~~~~~~~~~~

Скопировать класс PingNetwork из задания 1.2 и изменить его таким образом,
чтобы адреса пинговались не при вызове метода scan, а при вызове экземпляра.

Вся функциональность метода scan должна быть перенесена в метод, который отвечает
за вызов экземпляра.

Пример работы с классом PingNetwork. Сначала создаем сеть:

.. code:: python

    In [2]: net1 = IPv4Network('8.8.4.0/29')

И выделяем несколько адресов:

.. code:: python

    In [3]: net1.allocate('8.8.4.2')
       ...: net1.allocate('8.8.4.4')
       ...: net1.allocate('8.8.4.6')
       ...:

Затем создается экземпляр класса PingNetwork, сеть передается как аргумент:

.. code:: python

    In [6]: ping_net = PingNetwork(net1)

После этого экземпляр должен быть вызываемым объектом (callable):

.. code:: python

    In [7]: ping_net()
    Out[7]: (['8.8.4.4'], ['8.8.4.2', '8.8.4.6'])

    In [8]: ping_net(include_unassigned=True)
    Out[8]: (['8.8.4.4'], ['8.8.4.2', '8.8.4.6', '8.8.4.1', '8.8.4.3', '8.8.4.5'])

