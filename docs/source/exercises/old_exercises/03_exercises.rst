
.. raw:: latex

   \newpage

Задания
=======

.. include:: ./exercises_intro.rst


Задание 3.1
~~~~~~~~~~~~

Скопировать класс IPv4Network из задания 1.1.
Переделать класс таким образом, чтобы методы hosts и unassigned
стали переменными, но при этом значение переменной экземпляра вычислялось
каждый раз при обращении и запись переменной была запрещена.


Пример создания экземпляра класса:

.. code:: python

    In [1]: net1 = IPv4Network('8.8.4.0/29')

    In [2]: net1.hosts
    Out[2]: ('8.8.4.1', '8.8.4.2', '8.8.4.3', '8.8.4.4', '8.8.4.5', '8.8.4.6')

    In [3]: net1.allocate('8.8.4.2')

    In [4]: net1.allocate('8.8.4.3')

    In [5]: net1.unassigned
    Out[5]: ('8.8.4.1', '8.8.4.4', '8.8.4.5', '8.8.4.6')

Запись переменной:

.. code:: python

    In [6]: net1.unassigned = 'test'
    ---------------------------------------------------------------------------
    AttributeError                            Traceback (most recent call last)
    <ipython-input-6-c98e898835e1> in <module>
    ----> 1 net1.unassigned = 'test'

    AttributeError: can't set attribute


Задание 3.1a
~~~~~~~~~~~~~

Скопировать класс IPv4Network из задания 3.1.
Добавить метод from_tuple, который позволяет создать экземпляр класса IPv4Network
из кортежа вида ('10.1.1.0', 29).

Пример создания экземпляра класса:

.. code:: python

    In [3]: net2 = IPv4Network.from_tuple(('10.1.1.0', 29))

    In [4]: net2
    Out[4]: IPv4Network(10.1.1.0/29)



Задание 3.2
~~~~~~~~~~~~

Скопировать класс PingNetwork из задания 1.2.
Один из методов класса зависит только от значения аргумента и не зависит
от значений переменных экземпляра или другого состояния объекта.

Сделать этот метод статическим и проверить работу метода.


Задание 3.3
~~~~~~~~~~~~
Создать класс User, который представляет пользователя.
При создании экземпляра класса, как аргумент передается строка с именем пользователя.

Пример создания экземпляра класса:

.. code:: python

    In [3]: nata = User('nata')

После этого, должна быть доступна переменная username:

.. code:: python

    In [4]: nata.username
    Out[4]: 'nata'

Переменная username должна быть доступна только для чтения:


.. code:: python

    In [5]: nata.username = 'user'
    ---------------------------------------------------------------------------
    AttributeError                            Traceback (most recent call last)
    <ipython-input-5-eba76ef1ed86> in <module>
    ----> 1 nata.username = 'user'

    AttributeError: can't set attribute


Также в экземпляре должа быть создана переменная password, но
пока пользователь не установил пароль, при обращении к переменной должно
генерироваться исключение ValueError:

.. code:: python

    In [6]: nata.password
    ---------------------------------------------------------------------------
    ValueError                                Traceback (most recent call last)
    <ipython-input-6-7527817bf03d> in <module>
    ----> 1 nata.password
    ...
    ValueError: Надо установить пароль!

При установке пароля должны выполняться проверки:

* длины пароля - минимальная разрешенная длина пароля 8 символов
* содержится ли имя пользователя в пароле

Если проверки не прошли, надо вывести сообщение об ошибке и запросить пароль еще раз:

.. code:: python

    In [7]: nata.password = 'sadf'
    Пароль слишком короткий. Введите пароль еще раз: sdlkjfksnatasdfsd
    Пароль содержит имя пользователя. Введите пароль еще раз: asdfkpeorti2435
    Пароль установлен

Если пароль прошел проверки, должно выводиться сообщение "Пароль установлен"

.. code:: python

    In [8]: nata.password = 'sadfsadfsadf'
    Пароль установлен

