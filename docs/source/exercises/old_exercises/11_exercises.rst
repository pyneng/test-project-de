
.. raw:: latex

   \newpage

Задания
=======

.. include:: ./exercises_intro.rst

Задание 11.1
------------

Создать сопрограмму (coroutine) send_config_commands. Сопрограмма
должна подключаться по SSH с помощью asyncssh к одному устройству,
переходить в режим enable, в конфигурационный режим, выполнять указанные команды,
а затем выходить из конфигурационного режима.

Параметры функции:

* host - IP-адрес устройства
* username - имя пользователя
* password - пароль
* enable_password - пароль на режим enable
* config_commands - список команд или одна команда (строка), которые надо выполнить

Функция возвращает строку с результатами выполнения команды:

.. code:: python

    In [1]: import asyncio

    In [2]: from task_11_1 import send_config_commands

    In [3]: commands = ['interface loopback55', 'ip address 10.5.5.5 255.255.255.255']

    In [4]: print(asyncio.run(send_config_commands('192.168.100.1', 'cisco', 'cisco', 'cisco', commands)))
    conf t
    Enter configuration commands, one per line.  End with CNTL/Z.
    R1(config)#interface loopback55
    R1(config-if)#ip address 10.5.5.5 255.255.255.255
    R1(config-if)#end
    R1#

    In [5]: asyncio.run(send_config_commands(*r1, config_commands=commands))
    Out[5]: 'conf t\r\nEnter configuration commands, one per line.  End with CNTL/Z.\r\nR1(config)#interface loopback55\r\nR1(config-if)#ip address 10.5.5.5 255.255.255.255\r\nR1(config-if)#end\r\nR1#'


Запустить сопрограмму и проверить, что она работает корректно.
При необходимости можно создавать дополнительные функции.

Для заданий в этом разделе нет тестов!


.. code:: python

    import asyncio
    import asyncssh


    r1 = {'host': '192.168.100.1',
          'username': 'cisco',
          'password': 'cisco',
          'enable_password': 'cisco'}


Задание 11.2
------------

Создать сопрограмму (coroutine) configure_devices. Сопрограмма
должна настраивать одни и те же команды на указанных устройствах с помощью asyncssh.
Все устройства должны настраиваться параллельно.

Параметры функции:

* devices - список словарей с параметрами подключения к устройствам
* config_commands - команды конфигурационного режима, которые нужно отправить на каждое устройство

Функция возвращает список строк с результатами выполнения команды на каждом устройстве.
Запустить сопрограмму и проверить, что она работает корректно с устройствами
в файле devices.yaml и командами в списке commands.

При необходимости, можно использовать функции из предыдущих заданий
и создавать дополнительные функции.

Для заданий в этом разделе нет тестов!


.. code:: python

    commands = ['router ospf 55',
                'auto-cost reference-bandwidth 1000000',
                'network 0.0.0.0 255.255.255.255 area 0']


Задание 11.3
------------

Создать сопрограмму (coroutine) config_device_and_check. Сопрограмма
должна подключаться по SSH с помощью netdev к одному устройству,
переходить в режим enable, в конфигурационный режим, выполнять указанные команды,
а затем выходить из конфигурационного режима. После  настройки команд, функция
должна проверять, что они настроены корректно. Для проверки используется словарь (пояснение ниже).
Если проверка не прошла, должно генерироваться исключение ValueError с текстом на каком
устройстве не прошла проверка. Если проверка прошла, функция должна возвращать строку
с результатами выполнения команды.

Параметры функции:

* device - словарь с параметрами подключения к устройству
* config_commands - список команд или одна команда (строка), которые надо выполнить
* check - словарь, который указывает как проверить настройку команд config_commands. По умолчанию значение None.

Словарь, который передается в параметр check должен содержать две пары ключ-значение:

* command - команда, которая используется для проверки конфигурации
* search_line - какая строка должна присутствовать в выводе команды command

Запустить сопрограмму и проверить, что она работает корректно одним из устройств
в файле devices_netmiko.yaml и командами в списке commands.
Пример команд и словаря для проверки настройки есть в задании.

При необходимости, можно использовать функции из предыдущих заданий
и создавать дополнительные функции.

Для заданий в этом разделе нет тестов!

.. code:: python

    commands = ['router ospf 55',
                'auto-cost reference-bandwidth 1000000',
                'network 0.0.0.0 255.255.255.255 area 0']

    check_ospf = {'command': 'sh ip ospf',
                  'search_line': 'Routing Process "ospf 55" with ID'}

Задание 11.4
------------

Создать сопрограмму (coroutine) configure_network_device. Сопрограмма
должна подключаться по SSH к одному устройству, переходить в режим enable,
в конфигурационный режим, выполнять указанные команды, а затем выходить
из конфигурационного режима.

Для подключения должен функция должна использовать модуль netdev,
если device_type есть среди поддерживаемых платформ в netdev
и использовать asyncssh, если его среди платформ нет.
Для проверки второй ситуации можно прямо внутри функции удалить cisco_ios из устройств.

Параметры функции:

* device - словарь с параметрами подключения к устройству
* config_commands - список команд или одна команда (строка), которые надо выполнить

Функция возвращает строку с результатами выполнения команд (как в 11.1).

Как получить платформы netdev:

.. code:: python

    In [3]: netdev.platforms
    Out[3]:
    ['arista_eos',
     'aruba_aos_6',
     'aruba_aos_8',
     'cisco_asa',
     'cisco_ios',
     'cisco_ios_xe',
     'cisco_ios_xr',
     'cisco_nxos',
     'fujitsu_switch',
     'hp_comware',
     'hp_comware_limited',
     'hw1000',
     'juniper_junos',
     'mikrotik_routeros',
     'terminal',
     'ubiquity_edge']

Запустить сопрограмму и проверить, что она работает корректно одним из устройств
в файле devices_netmiko.yaml и командами в списке commands.

При необходимости, можно использовать функции из предыдущих заданий
и создавать дополнительные функции.
Для заданий в этом разделе нет тестов!

.. code:: python

    commands = ['router ospf 55',
                'auto-cost reference-bandwidth 1000000',
                'network 0.0.0.0 255.255.255.255 area 0']

Задание 11.5
------------

Создать сопрограмму (coroutine) configure_router. Сопрограмма подключается
по SSH (с помощью netdev) к устройству и выполняет перечень команд
в конфигурационном режиме на основании переданных аргументов.

При выполнении каждой команды, скрипт должен проверять результат на такие ошибки:
 * Invalid input detected, Incomplete command, Ambiguous command

Если при выполнении какой-то из команд возникла ошибка, должно
генерироваться исключение ValueError с информацией о том, какая ошибка возникла,
при выполнении какой команды и на каком устройстве, например:
Команда "logging" выполнилась с ошибкой "Incomplete command" на устройстве 192.168.100.1

Параметры функции:

* device - словарь с параметрами подключения к устройству
* config_commands - список команд или одна команда (строка), которые надо выполнить

Функция возвращает строку с результатами выполнения команды.

Примеры команд с ошибками:

::

    R1(config)#logging 0255.255.1
                       ^
    % Invalid input detected at '^' marker.

    R1(config)#logging
    % Incomplete command.

    R1(config)#a
    % Ambiguous command:  "a"

Запустить сопрограмму и проверить, что она работает корректно одним из устройств
в файле devices_netmiko.yaml.

При необходимости, можно использовать функции из предыдущих заданий
и создавать дополнительные функции.

Для заданий в этом разделе нет тестов!

Списки команд с ошибками и без:

.. code:: python

    commands_with_errors = ['logging 0255.255.1', 'logging', 'a']
    correct_commands = ['logging buffered 20010', 'ip http server']


Задание 11.5a
-------------

Создать сопрограмму (coroutine) log_device_configuration.
Сопрограмма log_device_configuration должна использовать configure_router
из задания 11.5 для настройки оборудования. Оборудование должно настраиваться
параллельно.

После настройки оборудования, log_device_configuration должна записывать
результаты в log-файл (все результаты записываются в один log-файл):

* если настройка прошла успешно, записать в файл строку "Успешно настроен 192.168.100.1",
  а затем записать результат, который вернула config_device_and_check
* если настройка не прошла проверку, записать в файл строку
  "Не получилось настроить 192.168.100.1" и записать сообщение из исключения

Параметры функции log_device_configuration:

* log_file - имя файла, в который будут записываться сообщения (сообщения могут быть в любом порядке)
* devices - список словарей с параметрами подключения к устройствам
* device_commands_map - словарь в котором указано на какое устройство
  отправлять какие команды. Пример словаря - commands

Пример команд и словаря для проверки настройки есть в задании.

При необходимости, можно использовать функции из предыдущих заданий
и создавать дополнительные функции.

Для заданий в этом разделе нет тестов!


.. code:: python

    ospf = ['router ospf 55',
            'auto-cost reference-bandwidth 1000000',
            'network 0.0.0.0 255.255.255.255 area 0']
    logging_with_error = 'logging 0255.255.1'
    logging_correct = 'logging buffered 20010'

    commands = {'192.168.100.2': logging_correct,
                '192.168.100.3': logging_with_error,
                '192.168.100.1': ospf}

